//=============================================
// multiplier
// by Evan M
//=============================================
module multiplier(inpA, inpB, out);
	input [15:0] inpA;
	input [15:0] inpB;
	output [31:0] out;
	
	wire s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;
	wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15;
	wire overflow;
	
	assign out[0] = inpA[0] & inpB[0];
	
	AddSub({0, 15(inpA[0]) & inpB[15:1]}, {16(inpA[1]) & inpB}, 0, s1, c1, overflow);
	assign out[1] = s1[0];
	
	AddSub({c1, s1[15:1]}, {16(inpA[1]) & inpB}, 0, s2, c2, overflow);
	assign out[2] = s2[0];
	
	AddSub({c2, s2[15:1]}, {16(inpA[2]) & inpB}, 0, s3, c3, overflow);
	assign out[3] = s3[0];
	
	AddSub({c3, s3[15:1]}, {16(inpA[3]) & inpB}, 0, s4, c4, overflow);
	assign out[4] = s4[0];
	
	AddSub({c4, s4[15:1]}, {16(inpA[4]) & inpB}, 0, s5, c5, overflow);
	assign out[5] = s5[0];
	
	AddSub({c5, s5[15:1]}, {16(inpA[5]) & inpB}, 0, s6, c6, overflow);
	assign out[6] = s6[0];
	
	AddSub({c6, s6[15:1]}, {16(inpA[6]) & inpB}, 0, s7, c7, overflow);
	assign out[7] = s7[0];
	
	AddSub({c7, s7[15:1]}, {16(inpA[7]) & inpB}, 0, s8, c8, overflow);
	assign out[8] = s8[0];
	
	AddSub({c8, s8[15:1]}, {16(inpA[8]) & inpB}, 0, s9, c9, overflow);
	assign out[9] = s9[0];
	
	AddSub({c9, s9[15:1]}, {16(inpA[9]) & inpB}, 0, s10, c10, overflow);
	assign out[10] = s10[0];
	
	AddSub({c10, s10[15:1]}, {16(inpA[10]) & inpB}, 0, s11, c11, overflow);
	assign out[11] = s11[0];
	
	AddSub({c11, s11[15:1]}, {16(inpA[11]) & inpB}, 0, s12, c12, overflow);
	assign out[12] = s12[0];
	
	AddSub({c12, s12[15:1]}, {16(inpA[12]) & inpB}, 0, s13, c13, overflow);
	assign out[13] = s13[0];
	
	AddSub({c13, s13[15:1]}, {16(inpA[13]) & inpB}, 0, s14, c14, overflow);
	assign out[14] = s14[0];
	
	AddSub({c14, s14[15:1]}, {16(inpA[14]) & inpB}, 0, s15, c15, overflow);
	assign out[30:15] = s15;
	assign out[31] = c15;
	
endmodule;